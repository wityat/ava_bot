import asyncio
import base64
import logging
from typing import Any, Dict, io

from aiogram import Bot, types
from aiogram.enums import ContentType

from aiogram_dialog import Dialog, DialogManager, Window, ChatEvent
from aiogram_dialog.api.entities import MediaAttachment
from aiogram_dialog.manager.bg_manager import BgManager
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Select, SwitchTo, Button, Group, Url
from aiogram_dialog.widgets.media import DynamicMedia
from aiogram_dialog.widgets.text import Const, Format, Progress
import random

from tg_bot.database import GenerationJob, FaceImage
from tg_bot.dialogs.states import *
from tg_bot import kandinsky, face_swapper
from tg_bot.database.models import User


async def get_data_from_user(dialog_manager: DialogManager, **kwargs):
    user_data = dialog_manager.current_context().dialog_data
    return {
        "face_image": user_data.get("face_image"),
    }


async def get_progress(dialog_manager: DialogManager, **kwargs):
    return {
        "progress": dialog_manager.dialog_data.get("progress", 0),
        "remaining_seconds": dialog_manager.dialog_data.get("remaining_seconds", 90),
    }


async def get_final_image(dialog_manager: DialogManager, **kwargs):
    return {
        "final_image": MediaAttachment(ContentType.PHOTO, url=dialog_manager.dialog_data.get("final_image_url", ''))
    }


async def get_error(dialog_manager: DialogManager, **kwargs):
    return {
        "error": dialog_manager.dialog_data.get("error", 90),
    }


async def user_accept_rules(c: ChatEvent, dialog, manager: DialogManager):
    db_session = manager.middleware_data["db_session"]
    user: User = await User.get(db_session, c.from_user.id)
    user.accepted_terms = True
    await user.save(db_session)
    await manager.switch_to(state=MainDialogStates.photo_upload)


async def upload_photo(message: types.Message, dialog, manager: DialogManager):
    answers = [
        "–í—ã–≥–ª—è–¥–∏—à—å –ø–æ—Ç—Ä—è—Å–Ω–æ)",
        "–ó–¥–æ—Ä–æ–≤–æ –≤—ã–≥–ª—è–¥–∏—à—å)",
        "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ –≤—ã—Å–ø–∞–ª—Å—è?(",
        "–ë—Ä–∞—Ç–∏–∫, –≤–∏–¥ —É —Ç–µ–±—è –ø–æ–Ω–æ—à–µ–Ω–Ω—ã–π....",
    ]
    logging.info("–§—É–Ω–∫—Ü–∏—è upload_photo –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞")
    if message.photo:
        await message.answer(random.choice(answers))
        manager.current_context().dialog_data["face_image"] = message.photo[-1].file_id
        db_session = manager.middleware_data["db_session"]
        user: User = await User.get(db_session, tg_id=message.from_user.id)
        face_image = FaceImage(file_id=message.photo[-1].file_id)
        generation_job = GenerationJob(user=user, face_image=face_image)
        await face_image.save(db_session)
        await generation_job.save(db_session)
        manager.current_context().dialog_data["generation_job_id"] = await generation_job.awaitable_attrs.id
        await manager.switch_to(state=MainDialogStates.description)
    else:
        await manager.switch_to(state=MainDialogStates.photo_not_uploaded)


async def process_description(message: types.Message, dialog, manager: DialogManager):
    if message.text:
        manager.current_context().dialog_data["text"] = message.text

        db_session = manager.middleware_data["db_session"]
        generation_job = await GenerationJob.get(db_session, manager.current_context().dialog_data["generation_job_id"])
        generation_job.text = manager.current_context().dialog_data["text"]
        await generation_job.save(db_session)

        await manager.switch_to(state=MainDialogStates.generating)
        asyncio.create_task(process_generating(manager.bg(), dialog_data=manager.current_context().dialog_data))
    else:
        await manager.switch_to(state=MainDialogStates.description_not_provided)


async def process_description__with_already_set_text(message: types.Message, dialog, manager: DialogManager):
    db_session = manager.middleware_data["db_session"]
    old_generation_job = await GenerationJob.get(db_session, manager.current_context().dialog_data["generation_job_id"])
    new_generation_job = GenerationJob(
        text=old_generation_job.text,
        user=await old_generation_job.awaitable_attrs.user,
        face_image=await old_generation_job.awaitable_attrs.face_image,
    )
    await new_generation_job.save(db_session)

    await manager.switch_to(state=MainDialogStates.generating)
    asyncio.create_task(process_generating(manager.bg(), dialog_data=manager.current_context().dialog_data))


async def process_generating(manager_bg: BgManager, dialog_data):
    bot: Bot = manager_bg.bot
    text = dialog_data["text"]
    progress_data = {
        "progress": 0,
        "remaining_seconds": 100
    }
    await manager_bg.update(progress_data)
    try:
        logging.warning("START")
        images = await kandinsky.generate(text, manager_bg, progress_data=progress_data)
        logging.warning("kandinsky DONE")
        generated_image = base64.b64decode(images[0])
        face_image = dialog_data.get("face_image")
        face_image_data: io.BytesIO = await bot.download(face_image)
        logging.warning("swapping face START")
        urls = await face_swapper.swap(generated_image,
                                       face_image_data.getvalue(),
                                       manager=manager_bg,
                                       progress_data=progress_data
                                       )
        logging.warning("swapping face DONE")
        await manager_bg.update({"final_image_url": urls[0]})
    except Exception as e:
        logging.error(str(e))
        await manager_bg.switch_to(MainDialogStates.generated_failure)
    else:
        await manager_bg.switch_to(MainDialogStates.generated_success)


ui = Dialog(
    Window(
        Const("""–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É!
–ù–æ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.
–ñ–º–∏ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–Ω—è—Ç—å'."""),
        Button(Const("‚úÖ –ü—Ä–∏–Ω—è—Ç—å"), id="accept", on_click=user_accept_rules),
        Url(Const("üßæ –ü—Ä–∞–≤–∏–ª–∞"), Const("https://example.com")),
        state=MainDialogStates.greeting,
        getter=get_data_from_user
    ),
    Window(
        Const("""–û—Ç–ª–∏—á–Ω–æ!
–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ!)

–ù–µ –±–æ–π—Å—è, –æ–Ω–æ –º–Ω–µ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–≤–æ–∏ —á–µ—Ä—Ç—ã –ª–∏—Ü–∞ –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.)"""),
        SwitchTo(Const("–û–±—ä—è—Å–Ω–∏—Ç–µ –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ..."), id='explanation', state=MainDialogStates.explanation),
        MessageInput(upload_photo),
        state=MainDialogStates.photo_upload,
        getter=get_data_from_user
    ),
    Window(
        Const("–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è...\n–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞!)"),
        MessageInput(upload_photo),
        state=MainDialogStates.photo_not_uploaded,
        getter=get_data_from_user
    ),
    Window(
        Const("""–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É —Ç–≤–æ–π –º–µ—á—Ç—ã‚ú®, –∞ –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ—ë —Ç–≤–æ–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –ª–∏—Ü–∞. 
–ë–æ–ª—å—à–µ –º—ã –Ω–∏–∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ—ë –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–µ –ª–∏—Ü–æ –∏ –æ–±—è–∑—É–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ —Ç–∞–π–Ω–µ)"""),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id='back', state=MainDialogStates.photo_upload),
        state=MainDialogStates.explanation,
        getter=get_data_from_user
    ),
    Window(
        Const("–ê —Ç–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ –∞–≤–∞—Ç–∞—Ä–∫—É —Å–≤–æ–µ–π –º–µ—á—Ç—ã.‚ú®"),
        MessageInput(process_description),
        state=MainDialogStates.description,
        getter=get_data_from_user
    ),
    Window(
        Const("–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ —Ç–≤–æ–µ–π –º–µ—á—Ç—ã‚ú®...\n–û–ø–∏—à–∏ –µ—ë –∏ –æ—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –º–Ω–µ!"),
        MessageInput(process_description),
        state=MainDialogStates.description_not_provided,
        getter=get_data_from_user
    ),
    Window(
        Format("""–°—É–ø–µ—Ä!
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É —Ç–≤–æ–µ–π –º–µ—á—Ç—ã ‚ú®...

–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {remaining_seconds} —Å–µ–∫—É–Ω–¥."""),
        Progress("progress", 10, filled='üü©'),
        state=MainDialogStates.generating,
        getter=get_progress
    ),
    Window(
        Const("""–õ–æ–≤–∏ —Å–≤–æ—é –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –º–µ—á—Ç—ã!‚ú®"""),
        DynamicMedia("final_image"),
        Button(Const("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"), id='try_again', on_click=process_description__with_already_set_text),
        SwitchTo(Const("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É"), id='new_ava', state=MainDialogStates.description),
        SwitchTo(Const("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"), id='upload_face', state=MainDialogStates.photo_upload),
        state=MainDialogStates.generated_success,
        getter=get_final_image
    ),
    Window(
        Format("""–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –º–µ—á—Ç—ã...‚ú® {error}"""),
        Button(Const("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"), id='try_again', on_click=process_description__with_already_set_text),
        SwitchTo(Const("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É"), id='new_ava', state=MainDialogStates.description),
        SwitchTo(Const("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"), id='upload_face', state=MainDialogStates.photo_upload),
        state=MainDialogStates.generated_failure,
        getter=get_error
    ),
)
